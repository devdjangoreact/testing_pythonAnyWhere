{"version":3,"file":"static/js/716.cd44b674.chunk.js","mappings":"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","sources":["components/NavBar.tsx","components/SideBar.tsx","layouts/Layout.tsx","router/routes/Authentication.tsx","router/routes/index.tsx","views/pages/ErrorPage.tsx","features/DashBoard.tsx","hooks/redux/hooks.ts","features/testing/components/NewTest.tsx","features/testing/components/RadioGroup.tsx","features/testing/components/TestList.tsx","features/testing/components/ScrollingPage.tsx","features/testing/components/SearchPage.tsx","router/Router.js","App.tsx"],"sourcesContent":["import { useState, useRef, useEffect, FormEvent } from \"react\";\nimport { BiMenu } from \"react-icons/bi\";\nimport { useStateContext } from \"../contexts/ContextProvider\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface ClassProps {\n  class?: string;\n}\n\nexport function NavBar(props: ClassProps) {\n  const { setMenuState, menuState } = useStateContext();\n  const [keyword, setKeyword] = useState(\"\");\n  let navigate = useNavigate();\n\n  const onSubmitHandler = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (keyword) {\n      navigate(`search?keyword=${keyword}&page=${1}&quantity=${10}`);\n    } else {\n      navigate(-1);\n    }\n  };\n\n  return (\n    <nav className=\"flex \">\n      <button\n        className=\"inline-flex p-2 mx-1 bg-blue-100 h-[55px] w-[55px] items-center justify-center rounded-md \"\n        onClick={() => setMenuState(!menuState)}\n      >\n        <BiMenu className=\"w-8 h-8 p-1 bg-orange-50 rounded\" />\n      </button>\n      <form\n        className=\"flex w-full items-center space-x-2 border rounded-md p-2\n       text-gray-900 bg-blue-100\"\n        onSubmit={onSubmitHandler}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className=\"h-5 w-5 flex-none \"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n          />\n        </svg>\n        <input\n          className=\"w-full outline-none appearance-none sm:w-auto bg-blue-100\"\n          type=\"text\"\n          placeholder=\"Search\"\n          onChange={(e) => setKeyword(e.target.value)}\n        />\n      </form>\n    </nav>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Link, NavLink, useParams } from \"react-router-dom\";\n\nimport { MdAddCircleOutline } from \"react-icons/md\";\n\nimport { useStateContext } from \"../contexts/ContextProvider\";\n\nexport function SideBar() {\n  const { setShowModal } = useStateContext();\n\n  return (\n    <div className=\"mr-1 max-w-[240px] min-w-[200px] bg-slate-300 h-full rounded-lg border overflow-y-scroll no-scrollbar\">\n      <div className=\"flex flex-col justify-between h-[calc(100%-0px)] bg-blue-50\">\n        <div>\n          <nav aria-label=\"Main Nav\" className=\"flex flex-col space-y-1\">\n            <ul className=\"pt-2 pb-4 space-y-1 text-sm\">\n              {/* <li className=\"rounded-sm\">\n                <Link\n                  to=\"/new-testing\"\n                  className=\"flex items-center p-2 space-x-3 rounded-md mx-1 bg-slate-50 hover:bg-orange-50\"\n                >\n                  <span>Продовжити останній</span>\n                </Link>\n              </li>\n              <li className=\"rounded-sm\">\n                <Link\n                  to=\"/history-test\"\n                  className=\"flex items-center m p-2 space-x-3 rounded-md mx-1 bg-slate-50 hover:bg-orange-50\"\n                >\n                  <span>Історія тестування</span>\n                </Link>\n              </li>\n\n              <li className=\"rounded-sm\">\n                <Link\n                  to=\"/test-mistake\"\n                  className=\"flex items-center p-2 space-x-3 rounded-md mx-1 bg-slate-50 hover:bg-orange-50\"\n                >\n                  <span>Тести з помилками</span>\n                </Link>\n              </li> */}\n\n              <li className=\"rounded-sm\">\n                <Link\n                  to=\"/new-test\"\n                  className=\"flex items-center p-2 space-x-3 rounded-md mx-1 bg-slate-50 hover:bg-orange-50\"\n                >\n                  <span>Тести</span>\n                </Link>\n              </li>\n            </ul>\n          </nav>\n        </div>\n      </div>\n    </div>\n  );\n}\n","// ** React Imports\nimport { Outlet } from \"react-router-dom\";\nimport { NavBar } from \"../components\";\n\nimport { SideBar } from \"../components/SideBar\";\n\nimport { useStateContext } from \"../contexts/ContextProvider\";\n\nconst BlankLayout = () => {\n  const { menuState } = useStateContext();\n  return (\n    <div className=\"bg-orange-50\">\n      <NavBar />\n      <div className=\"flex justify-center items-start h-screen p-1 \">\n        {menuState && <SideBar key={\"_sidebar\"} />}\n        <div className=\"w-full h-full\">\n          <div className=\"h-[calc(100%)] bg-orange-50\">\n            <Outlet />\n          </div>\n          <div></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BlankLayout;\n","const AuthenticationRoutes: [] = [];\n\nexport default AuthenticationRoutes;\n","// ** React Imports\n// import { lazy } from \"react\";\n\n// ** Routes Imports\nimport AuthenticationRoutes from \"./Authentication\";\n// import AppsRoutes from \"./Apps\";\n\n// ** Default Route\nconst DefaultRoute = \"/home\";\n\n// ** Document title\nconst TemplateTitle = \"%s - Solution\";\n\n// ** Merge Routes\nconst allRoutes = [\n  ...AuthenticationRoutes,\n  // ...AppsRoutes,\n];\n\nexport { DefaultRoute, TemplateTitle, allRoutes };\n","import React from \"react\";\n\nconst ErrorPage = () => {\n  return <div>ErrorPage</div>;\n};\n\nexport default ErrorPage;\n","import React from \"react\";\n\nconst DashBoard = () => {\n  return <div>DashBoard</div>;\n};\n\nexport default DashBoard;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \"../../features/store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useEffect, useState } from \"react\";\nimport { createList, heshtag, testList } from \"../testingSlite\";\nimport { useAppDispatch, useAppSelector } from \"../../../hooks/redux/hooks\";\nimport { Hashtag as HashtagModel } from \"../models/testing.interface\";\nimport testsService from \"../services/Test.service\";\nimport { Link, NavLink } from \"react-router-dom\";\n\nconst NewTest = () => {\n  const dispatch = useAppDispatch();\n\n  const { HashtagList, Testlist } = useAppSelector((state) => state.testing);\n\n  const clickHandler = async (item: HashtagModel) => {\n    if (window.confirm(\"Створити тест?\")) {\n      const res = await testsService.useCreateList(item.id);\n      alert(res);\n    }\n  };\n\n  const clickChoise = (id: string) => {\n    if (window.confirm(\"Створити тест?\")) {\n      alert(\"ok \" + id);\n    }\n  };\n\n  useEffect(() => {\n    dispatch(heshtag());\n    dispatch(testList(false));\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h4 className=\"p-1 my-1 mx-2 \"> Список тестів:</h4>\n      {HashtagList &&\n        HashtagList.map((item) => (\n          <div className=\"flex my-1\">\n            <p>\n              {item.id}. {item.title}\n            </p>\n            <button\n              className=\"mx-2 px-1 rounded-md bg-orange-100 hover:bg-orange-200\"\n              id={item.id}\n              type=\"submit\"\n              onClick={(e: any) => clickHandler(item)}\n            >\n              створити тест\n            </button>\n          </div>\n        ))}\n\n      <h4 className=\"p-1 my-1 mx-2 mt-4\"> Мої тести:</h4>\n      {Testlist &&\n        Testlist.map((item) => (\n          <div className=\"flex my-1\">\n            <p>\n              {item.title} {item.description}\n            </p>\n            <NavLink\n              className=\"mx-2 px-1 rounded-md bg-orange-100 hover:bg-orange-200\"\n              key={item.id}\n              to={`/test/${item.id}`}\n            >\n              Вибрати тест\n            </NavLink>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default NewTest;\n","import React, { useState } from \"react\";\nimport { Choise } from \"../models/testing.interface\";\nimport testsService from \"../services/Test.service\";\nimport { putSetTestList } from \"../testingSlite\";\n\ninterface Props {\n  options: Choise[];\n  onChange: (value: string) => void;\n  set_test: number | undefined;\n  setTestTd: number | undefined;\n}\n\nconst RadioGroup: React.FC<Props> = ({\n  options,\n  onChange,\n  set_test,\n  setTestTd,\n}) => {\n  const [selectedValue, setSelectedValue] = useState(\"\");\n  const [hideAnswer, setHideAnswer] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n  const [showTrue, setShowTrue] = useState(false);\n\n  const handleOptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedValue(event.target.value);\n    onChange(event.target.value);\n    setHideAnswer(true);\n    setDisabled(true);\n    console.log(event.target.value);\n    testsService.useSetTestList(String(setTestTd), event.target.value);\n  };\n\n  const ElseOne = () => {\n    setHideAnswer(false);\n    setDisabled(false);\n    setSelectedValue(\"\");\n    setShowTrue(false);\n  };\n\n  const TrueTest = () => {\n    setShowTrue(true);\n  };\n\n  return (\n    <div>\n      {options.map((option) => (\n        <div key={option.title} className={`flex items-center mb-1`}>\n          <>\n            <input\n              type=\"radio\"\n              value={String(option.id)}\n              checked={\n                selectedValue === String(option.id) || option.id === set_test\n              }\n              onChange={handleOptionChange}\n              className={` w-4 h-4 border-gray-300 focus:ring-2 focus:ring-blue-300 dark:focus:ring-blue-600 dark:bg-gray-700 dark:border-gray-600`}\n              disabled={disabled}\n            />\n            <label\n              className={`${\n                selectedValue === String(option.id) && !option.choise\n                  ? \"bg-red-200 \"\n                  : hideAnswer && option.choise && showTrue\n                  ? \"bg-green-200\"\n                  : \"\"\n              } block ml-2 px-2 text-sm font-medium text-gray-900 dark:text-gray-300`}\n            >\n              {option.title}\n            </label>{\" \"}\n            {(selectedValue === String(option.id) &&\n              hideAnswer &&\n              !option.choise) ||\n            option.id === set_test ? (\n              <>\n                <button\n                  className=\" mx-2 px-2 rounded-md bg-orange-100 hover:bg-orange-300\"\n                  onClick={ElseOne}\n                >\n                  Ще раз\n                </button>\n                <button\n                  className=\" mx-2 px-2 rounded-md bg-orange-100 hover:bg-orange-300\"\n                  onClick={TrueTest}\n                >\n                  Правельний?\n                </button>\n              </>\n            ) : (\n              \"\"\n            )}\n          </>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default RadioGroup;\n","import { useEffect, useState } from \"react\";\nimport { testList, testListFull } from \"../testingSlite\";\nimport { useAppDispatch, useAppSelector } from \"../../../hooks/redux/hooks\";\nimport RadioGroup from \"./RadioGroup\";\nimport { useParams } from \"react-router-dom\";\n\nconst Testing = (text: string) => {\n  const [choised_test, setChiosed] = useState(true);\n  const [allShow, setAllShow] = useState(true);\n  const dispatch = useAppDispatch();\n  const params = useParams();\n  const { isLoadingSearchTest, TestlistFull } = useAppSelector(\n    (state) => state.testing\n  );\n\n  const clickHandler = (username: string) => {\n    // setDropdown(false);\n  };\n\n  const submitForm = (event: React.FormEvent<HTMLFormElement>) => {\n    // Preventing the page from reloading\n    event.preventDefault();\n\n    // Do something\n    alert(event);\n  };\n\n  useEffect(() => {\n    dispatch(testListFull(params.id));\n  }, [dispatch, params]);\n\n  const handleRadioChange = (value: string) => {\n    console.log(`Selected value: ${value}`);\n  };\n\n  console.log(TestlistFull);\n\n  if (isLoadingSearchTest) return <>loding .. </>;\n\n  return (\n    <div className=\"pt-1 mx-auto h-full w-full\">\n      <ul className=\"mx-4\" key={\"item\"}>\n        {TestlistFull &&\n          TestlistFull.map((item) => (\n            <>\n              <form action=\"submitForm\" key={item.id}>\n                <p>{item.title}</p>\n                <p>{item.description}</p>\n                <p>\n                  {item.created_date\n                    .toString()\n                    .substring(0, 19)\n                    .replace(\"T\", \" \")}\n                </p>\n                <p>\n                  {item.updated_date\n                    .toString()\n                    .substring(0, 19)\n                    .replace(\"T\", \" \")}\n                </p>\n              </form>\n              <div>\n                <label className=\"px-2\" htmlFor=\"my-checkbox\">\n                  {choised_test ? \"Не вибрані\" : \"Вибрані\"}\n                </label>\n                <input\n                  className=\"px-2\"\n                  type=\"checkbox\"\n                  id=\"my-checkbox\"\n                  name=\"my-checkbox\"\n                  checked={choised_test}\n                  onClick={() => setChiosed(!choised_test)}\n                />\n                <label className=\"px-2\" htmlFor=\"my-checkbox\">\n                  Всі\n                </label>\n                <input\n                  className=\"px-2\"\n                  type=\"checkbox\"\n                  id=\"my-checkbox\"\n                  name=\"my-checkbox\"\n                  checked={allShow}\n                  onClick={() => setAllShow(!allShow)}\n                />\n              </div>\n\n              <p className=\"m-2 text-sm text-yellow-900\">Тести:</p>\n\n              {item.choised &&\n                item.choised.map((choised) => (\n                  <>\n                    {allShow ||\n                    (choised.set_test && choised_test) ||\n                    (!choised.set_test && !choised_test)\n                      ? choised.test &&\n                        choised.test.map((item) => (\n                          <div key={item.id}>\n                            <p\n                              key={item.id}\n                              className=\"mb-2 font-medium text-base\"\n                            >\n                              {item.id}.{item.description}\n                            </p>\n                            <RadioGroup\n                              set_test={choised.set_test}\n                              options={item.choise}\n                              setTestTd={choised.id}\n                              onChange={handleRadioChange}\n                            />\n                          </div>\n                        ))\n                      : \"\"}\n                  </>\n                ))}\n            </>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Testing;\n","import React, { useState, useEffect } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport axios from \"axios\";\nimport { useSearchParams } from \"react-router-dom\";\nimport RadioGroup from \"./RadioGroup\";\nimport { TestingObject } from \"../models/testing.interface\";\nimport { settestlistPost } from \"../testingSlite\";\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [skip, setSkip] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n\n  const [page, setPage] = useState(1);\n  const [quantity, setQuantity] = useState(10);\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    const params = {\n      keyword: searchParams.get(\"keyword\"),\n      page: page,\n      quantity: quantity,\n    };\n    const response = await axios.get<TestingObject>(\n      `/testwithset?keyword=${params.keyword}&page=${params.page}&quantity=${params.quantity}`\n    );\n    if (response.data.tests.length > 0) {\n      setData(data.concat(response.data.tests));\n      setSkip(skip + 10);\n      setPage(page + 1);\n      setQuantity(quantity);\n    } else {\n      setHasMore(false);\n    }\n  };\n\n  const handleRadioChange = (value: string) => {\n    settestlistPost(value);\n    console.log(`Selected value: ${value}`);\n  };\n\n  return (\n    <InfiniteScroll\n      dataLength={data.length}\n      next={fetchData}\n      hasMore={hasMore}\n      loader={<h4>Loading...</h4>}\n    >\n      {data &&\n        data.map((item) => (\n          <div key={item.id}>\n            <p className=\"mb-2\">{item.description}</p>\n            <RadioGroup\n              set_test={undefined}\n              setTestTd={undefined}\n              options={item.choise}\n              onChange={handleRadioChange}\n            />\n          </div>\n        ))}\n    </InfiniteScroll>\n  );\n};\n\nexport default App;\n","import { useEffect, useState } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../../hooks/redux/hooks\";\nimport { searchTest, settestlistPost } from \"../testingSlite\";\nimport { useSearchParams } from \"react-router-dom\";\nimport RadioGroup from \"./RadioGroup\";\nimport ScrollingPage from \"./ScrollingPage\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst SearchPage = () => {\n  const [page, setPage] = useState(1);\n  const [quantity, setQuantity] = useState(10);\n  const [hasMore, setHasMore] = useState(true);\n\n  const dispatch = useAppDispatch();\n\n  const [searchParams] = useSearchParams();\n\n  const { Tests } = useAppSelector((state) => state.testing);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    const params = {\n      keyword: searchParams.get(\"keyword\"),\n      page: page,\n      quantity: quantity,\n    };\n\n    dispatch(searchTest(params as any));\n    if (Tests.length > 0) {\n      setPage(page + 1);\n      setQuantity(quantity);\n    } else {\n      setHasMore(false);\n    }\n  };\n\n  const handleRadioChange = (value: string) => {\n    settestlistPost(value);\n    console.log(`Selected value: ${value}`);\n  };\n\n  return (\n    <div className=\"pt-1 mx-auto h-full w-full\">\n      <ul className=\"mx-4\" key={\"item\"}>\n        {/* <InfiniteScroll\n          dataLength={Tests.length}\n          next={fetchData}\n          hasMore={hasMore}\n          loader={<h4>Loading...</h4>}\n        >\n          {Tests &&\n            Tests.map((item) => (\n              <div key={item.id}>\n                <p className=\"mb-2\">{item.description}</p>\n                <RadioGroup\n                  set_test={undefined}\n                  setTestTd={undefined}\n                  options={item.choise}\n                  onChange={handleRadioChange}\n                />\n              </div>\n            ))}\n        </InfiniteScroll> */}\n        <ScrollingPage />\n      </ul>\n    </div>\n  );\n};\n\nexport default SearchPage;\n","// ** Router imports\nimport { useRoutes, Navigate } from \"react-router-dom\";\n\n// ** Layouts\nimport Layout from \"../layouts/Layout\";\n\n// ** Router imports\nimport { lazy } from \"react\";\n\n// ** GetRoutes\nimport { allRoutes } from \"./routes\";\n\nimport ErrorPage from \"../views/pages/ErrorPage\";\n\n//DashBoard\nimport DashBoard from \"../features/DashBoard\";\n\nimport { NewTest, TestList, SearchPage } from \"../features/testing\";\n\nconst Router = () => {\n  const routes = useRoutes([\n    {\n      path: \"/\",\n      element: <Layout />,\n      errorElement: <ErrorPage />,\n      children: [\n        { index: true, element: <DashBoard /> },\n        { path: \"dashboard\", element: <DashBoard /> },\n        {\n          path: \"search\",\n          element: <SearchPage />,\n          // children: [\n          //   {\n          //     path: \":keyword\",\n          //     element: <SearchPage />,\n          //     children: [\n          //       {\n          //         path: \":keyword\",\n          //         element: <TestList />,\n          //       },\n          //     ],\n          //   },\n          // ],\n        },\n\n        {\n          path: \"new-test\",\n          element: <NewTest />,\n        },\n        {\n          path: \"test\",\n          children: [{ path: \":id\", element: <TestList /> }],\n        },\n      ],\n      ...allRoutes,\n    },\n  ]);\n\n  return routes;\n};\n\nexport default Router;\n","import { Suspense } from \"react\";\n\n// ** Router Import\nimport Router from \"./router/Router\";\n\nconst App = () => {\n  return (\n    <Suspense fallback={null}>\n      <Router />\n    </Suspense>\n  );\n};\n\nexport default App;\n"],"names":["NavBar","props","useStateContext","setMenuState","menuState","useState","keyword","setKeyword","navigate","useNavigate","className","onClick","onSubmit","e","preventDefault","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","type","placeholder","onChange","target","value","SideBar","setShowModal","to","allRoutes","AuthenticationRoutes","useAppDispatch","useDispatch","useAppSelector","useSelector","dispatch","state","testing","HashtagList","Testlist","clickHandler","item","window","confirm","testsService","id","res","alert","useEffect","heshtag","testList","map","title","description","options","set_test","setTestTd","selectedValue","setSelectedValue","hideAnswer","setHideAnswer","disabled","setDisabled","showTrue","setShowTrue","handleOptionChange","event","console","log","String","ElseOne","TrueTest","option","checked","choise","text","choised_test","setChiosed","allShow","setAllShow","params","useParams","isLoadingSearchTest","TestlistFull","testListFull","handleRadioChange","action","created_date","toString","substring","replace","updated_date","htmlFor","name","choised","test","data","setData","skip","setSkip","hasMore","setHasMore","page","setPage","quantity","setQuantity","useSearchParams","searchParams","fetchData","get","axios","response","tests","length","concat","settestlistPost","dataLength","next","loader","undefined","Tests","searchTest","ScrollingPage","useRoutes","path","element","Layout","errorElement","children","index","TestList","Suspense","fallback"],"sourceRoot":""}